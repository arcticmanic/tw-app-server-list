{"version":3,"sources":["components/Header/index.jsx","store/current-data/actions.js","components/ListItem/index.jsx","components/List/index.jsx","store/data/actions.js","store/current-data/selectors.js","components/Form/index.jsx","components/Main/index.jsx","pages/App/index.jsx","store/data/reducer.js","store/current-data/reducer.js","store/root-reducer.js","const.js","index.js","api/api.js","mock/data.js"],"names":["Header","className","href","ActionType","getCurrentServer","createAction","server","payload","clearCurrentOffer","setServerName","name","setServerType","type","ListItem","customerId","customer_id","serverName","server_name","serverType","server_type","dispatch","useDispatch","onClick","viewBox","fill","d","fillRule","clipRule","List","servers","useSelector","state","DATA","map","id","getServers","updateServer","CURRENT_DATA","Form","currentServer","serverForm","useRef","ref","onSubmit","evt","preventDefault","inputField","current","querySelector","selectField","value","htmlFor","required","placeholder","aria-label","Main","App","serversData","createReducer","isServersLoaded","builder","addCase","action","currentServerData","NameSpace","combineReducers","data","currentData","HttpCode","ErrorMessage","api","axios","create","baseURL","timeout","withCredentials","interceptors","response","use","err","undefined","status","console","log","createApi","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","thunk","extraArgument","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8a846a3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <header className=\"text-gray-100 bg-gray-900 body-font shadow w-full\">\n      <div className=\"container mx-auto flex flex-wrap p-5 flex-col md:flex-row items-center\">\n        <a className=\"flex order-first lg:order-none lg:w-1/5 title-font font-medium items-center lg:items-center lg:justify-center mb-4 md:mb-0\" href=\"/\">\n          <span className=\"ml-3 text-xl\">Servers</span>\n        </a>\n      </div>\n    </header>\n  )\n};\n\nexport default Header;","import { createAction } from '@reduxjs/toolkit';\n\nexport const ActionType = {\n  LOAD_CURRENT_SERVER: 'current/loadCurrentServer',\n  CLEAR_CURRENT_STATE: 'current/clearCurrentState',\n  SET_SERVER_NAME: 'current/setServerName',\n  SET_SERVER_TYPE: 'current/setServerType',\n};\n\nexport const getCurrentServer = createAction(\n  ActionType.LOAD_CURRENT_SERVER,\n  (server) => ({\n    payload: server,\n  })\n);\n\nexport const clearCurrentOffer = createAction(ActionType.CLEAR_CURRENT_STATE);\n\nexport const setServerName = createAction(\n  ActionType.SET_SERVER_NAME,\n  (name) => ({\n    payload: name,\n  })\n);\n\nexport const setServerType = createAction(\n  ActionType.SET_SERVER_TYPE,\n  (type) => ({\n    payload: type,\n  })\n);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getCurrentServer } from '../../store/current-data/actions';\n\nconst ListItem = ({server}) => {\n  const {\n    customer_id: customerId,\n    server_name: serverName,\n    server_type: serverType,\n  } = server;\n  const dispatch = useDispatch();\n\n  const handleEditClick = () => {\n    dispatch(getCurrentServer(server));\n  };\n\n  return (\n    <li className=\"flex items-center py-5 border-b px-3 transition hover:bg-indigo-100\">\n      <div className=\"flex-grow\">\n        {customerId && (\n          <div className=\"text-md text-gray-400\">\n            {customerId}{' '}\n            <span className=\"italic text-xs text-gray-400 font-normal\">\n              (customer id)\n            </span>\n          </div>\n        )}\n        {serverName && (\n          <div className=\"text-lg font-semibold\">\n            {serverName}{' '}\n            <span className=\"italic text-xs text-gray-400 font-normal\">\n              (server name)\n            </span>\n          </div>\n        )}\n        {serverType && (\n          <div className=\"text-md italic text-gray-400\">\n            {serverType}{' '}\n            <span className=\"italic text-xs text-gray-400 font-normal\">\n              (server type)\n            </span>\n          </div>\n        )}\n      </div>\n      <button\n        className=\"h-5 w-5 d-flex\"\n        type=\"button\"\n        onClick={handleEditClick}\n      >\n        <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path d=\"M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z\" />\n          <path\n            fillRule=\"evenodd\"\n            d=\"M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      </button>\n      <button className=\"h-5 w-5\" type=\"button\">\n        <svg viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path\n            fillRule=\"evenodd\"\n            d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\"\n            clipRule=\"evenodd\"\n          />\n        </svg>\n      </button>\n    </li>\n  );\n};\n\nexport default ListItem;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport ListItem from '../ListItem';\n\nconst List = () => {\n  const { servers } = useSelector((state) => state.DATA);\n\n  return (\n    <section className=\"flex flex-col pt-3 w-1/3 bg-gray-50 overflow-y-scroll\">\n      <ul>\n        {servers.map((server, id) => (\n          <ListItem key={id} server={server} />\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default List;","import { createAction } from '@reduxjs/toolkit';\n\nexport const ActionType = {\n  LOAD_SERVERS: 'data/loadServers',\n  UPDATE_SERVER: 'data/updateServer',\n};\n\nexport const getServers = createAction(ActionType.LOAD_SERVERS, (servers) => ({\n  payload: servers,\n}))\n\nexport const updateServer = createAction(ActionType.UPDATE_SERVER, (server) => ({\n  payload: server,\n}));","export const getCurrentServer = state => state.CURRENT_DATA;\n","import React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setServerName, setServerType } from '../../store/current-data/actions';\nimport { updateServer } from '../../store/data/actions';\nimport { getCurrentServer } from '../../store/current-data/selectors';\n\nconst Form = () => {\n  const { currentServer } = useSelector(getCurrentServer);\n  const dispatch = useDispatch();\n  const serverForm = useRef();\n\n  const {\n    customer_id: customerId,\n    server_name: serverName,\n    server_type: serverType,\n  } = currentServer;\n\n  const handleFormSubmit = (evt) => {\n    evt.preventDefault();\n    const inputField = serverForm.current.querySelector('#server_name');\n    const selectField = serverForm.current.querySelector('#server_type');\n\n    dispatch(setServerName(inputField.value));\n    dispatch(setServerType(selectField.value));\n    dispatch(\n      updateServer({\n        customer_id: customerId,\n        server_name: inputField.value,\n        server_type: selectField.value,\n      })\n    );\n  };\n\n  return (\n    <div className=\"leading-loose w-full\">\n      <form\n        className=\"max-w-xl m-auto p-10 bg-white rounded shadow-xl\"\n        ref={serverForm}\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"text-gray-800 font-medium\">Server information</div>\n        {customerId && (\n          <div className=\"text-md text-gray-400\">\n            {customerId}{' '}\n            <span className=\"italic text-xs text-gray-400 font-normal\">\n              (customer id)\n            </span>\n          </div>\n        )}\n        {serverName && (\n          <div className=\"text-lg font-semibold\">\n            {serverName}{' '}\n            <span className=\"italic text-xs text-gray-400 font-normal\">\n              (server name)\n            </span>\n          </div>\n        )}\n        {serverType && (\n          <div className=\"text-md italic text-gray-400\">\n            {serverType}{' '}\n            <span className=\"italic text-xs text-gray-400 font-normal\">\n              (server type)\n            </span>\n          </div>\n        )}\n        <div className=\"mt-3\">\n          <label className=\"block text-sm mb-2\" htmlFor=\"server_name\">\n            Server name\n          </label>\n          <input\n            className=\"w-full px-5 py-4 h-16 text-gray-700 bg-gray-200 rounded\"\n            id=\"server_name\"\n            name=\"server_name\"\n            type=\"text\"\n            required=\"required\"\n            placeholder=\"Server name\"\n            aria-label=\"Server name\"\n          />\n        </div>\n        <div className=\"mt-3\">\n          <label className=\"block text-sm mb-2\" htmlFor=\"server_type\">\n            Server type\n          </label>\n          <select\n            className=\"w-full px-5 py-4 h-16 text-gray-700 bg-gray-200 rounded\"\n            required=\"required\"\n            name=\"server_type\"\n            id=\"server_type\"\n          >\n            <option value=\"\">Choose server type</option>\n            <option value=\"vds\">vds</option>\n            <option value=\"dedicated\">dedicated</option>\n            <option value=\"hosting\">hosting</option>\n          </select>\n        </div>\n        <div className=\"flex mt-3\">\n          <button className=\"mr-5\" type=\"submit\">\n            Save\n          </button>\n          <button type=\"reset\">Reset</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from 'react';\nimport List from '../List';\nimport Form from '../Form';\n\nconst Main = () => {\n  return (\n    <main className=\"flex w-full h-full shadow-lg rounded-3xl justify-center mt-2 mb-2 p-8\">\n      <List />\n      <section className=\"w-2/3 m-auto px-4 pt-3 flex flex-col items-center bg-white rounded-r-3xl\">\n        <h1 className=\"font-bold text-2xl mb-2\">Server name</h1>\n        <Form />\n      </section>\n    </main>\n  )\n};\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Header from '../../components/Header';\nimport Main from '../../components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  )\n}\n\nexport default App\n","import { getServers, updateServer } from './actions';\nimport { createReducer } from '@reduxjs/toolkit';\n\nexport const initialState = {\n  servers: [],\n  isServersLoaded: false,\n};\n\nconst serversData = createReducer(initialState, (builder) => {\n  builder.addCase(getServers, (state, action) => {\n    state.servers = action.payload;\n    state.isServersLoaded = true;\n  });\n  builder.addCase(updateServer, (state, action) => {\n    state.servers = state.servers.map((server) => {\n      return server.customer_id === action.payload.customer_id\n        ? {\n            ...server,\n            server_name: action.payload.server_name,\n            server_type: action.payload.server_type,\n          }\n        : server;\n    });\n  });\n});\n\nexport default serversData;\n","import {\n  clearCurrentOffer,\n  getCurrentServer,\n  setServerName,\n  setServerType,\n} from './actions';\nimport { createReducer } from '@reduxjs/toolkit';\n\nexport const initialState = {\n  currentServer: {\n    customer_id: 'user1',\n    server_name: 'server7',\n    server_type: 'vds',\n  },\n};\n\nconst currentServerData = createReducer(initialState, (builder) => {\n  builder.addCase(getCurrentServer, (state, action) => {\n    state.currentServer = action.payload;\n  });\n  builder.addCase(clearCurrentOffer, (state) => {\n    state.currentServer = null;\n  });\n  builder.addCase(setServerName, (state, action) => {\n    state.currentServer.server_name = action.payload;\n  });\n  builder.addCase(setServerType, (state, action) => {\n    state.currentServer.server_type = action.payload;\n  });\n});\n\nexport default currentServerData;","import { combineReducers } from 'redux';\nimport data from './data/reducer';\nimport currentData from './current-data/reducer';\n\nexport const NameSpace = {\n  DATA: `DATA`,\n  CURRENT_DATA: `CURRENT_DATA`,\n}\n\nexport default combineReducers({\n  [NameSpace.DATA]: data,\n  [NameSpace.CURRENT_DATA]: currentData,\n})","export const APIRoutePath = {\n  SERVERS: `/servers`,\n}\n\nexport const FetchStatus = {\n  PENDING: `PENDING`,\n  SENDING: `SENDING`,\n  DONE: `DONE`,\n  ERROR: `ERROR`,\n}\n\nexport const HttpCode = {\n  UNAUTHORIZED: 401,\n  DATA_ERROR: 400,\n  AUTHORIZED: 200,\n  NOT_FOUND: 404,\n};\n\nexport const BACKEND_URL = `https://mock.url`;\n\nexport const REQUEST_TIMEOUT = 5000;\n\nexport const ErrorMessage = {\n  NO_CONNECTION: `Server is not available.`,\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { Provider } from 'react-redux';\nimport App from './pages/App';\nimport rootReducer from './store/root-reducer';\nimport { createApi } from './api/api';\nimport { getServers } from './store/data/actions';\nimport { data } from './mock/data';\n\nimport './index.css';\n\nconst api = createApi();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: () => getDefaultMiddleware({\n    thunk: {\n      extraArgument: api\n    }\n  })\n});\n\nstore.dispatch(getServers(data));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","import axios from 'axios';\nimport { HttpCode, ErrorMessage, REQUEST_TIMEOUT, BACKEND_URL } from '../const';\n\nexport const createApi = () => {\n  const api = axios.create({\n    baseURL: BACKEND_URL,\n    timeout: REQUEST_TIMEOUT,\n    withCredentials: true,\n  });\n\n  const onSuccess = (response) => response;\n\n  const onFail = (err) => {\n    const { response } = err;\n\n    if (response === undefined) {\n      throw err;\n    }\n\n    if (response.status === HttpCode.UNAUTHORIZED) {\n      throw err;\n    }\n\n    if (response.status === HttpCode.DATA_ERROR) {\n      console.log(ErrorMessage.NO_CONNECTION);\n    }\n\n    if (response.status === HttpCode.NOT_FOUND) {\n      console.log(ErrorMessage.NO_CONNECTION);\n    }\n\n    throw err;\n  };\n\n  api.interceptors.response.use(onSuccess, onFail);\n\n  return api;\n};","export const data = [\n  {\n    customer_id: 'user1',\n    server_name: 'server7',\n    server_type: 'vds',\n  },\n  {\n    customer_id: 'user5',\n    server_name: 'server2',\n    server_type: 'dedicated',\n  },\n  {\n    customer_id: 'user3',\n    server_name: 'server4',\n    server_type: 'hosting',\n  },\n];\n"],"sourceRoot":""}